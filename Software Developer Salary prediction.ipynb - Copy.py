# -*- coding: utf-8 -*-
"""Software Engineer Salary prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yVfCINouWNvXUZNzHj0CvChKyNm2chw0
"""

import pandas as pd
df = pd.read_csv("C:\\Users\\SUNNY\\Downloads\\Software Developer Salary prediction\\survey_results_public.csv")

df.head()

"""so here we want country, Edlevel, YearscodePro, Employment, ConvertedComp

> Add blockquote


"""

print(sorted(df.columns.tolist()))

df = df[['Country','EdLevel','YearsCodePro','Employment','ConvertedCompYearly']]

df = df.rename({'ConvertedCompYearly': 'Salary'},axis=1)
df = df[df['Salary'].notnull()]

df.head()

df.info()

df = df.dropna()
df.isnull().sum()

df.head()

df.shape

df.isnull().sum()

df.head(100)

print(df['Employment'].unique())

df['Employment'] = df['Employment'].replace('Employed, full-time', 'Employed_full-time')

df['Employment'].unique()

df.tail()

df[df['Employment'] == 'Employed_full-time'].value_counts()

df = df [ df['Employment'] == 'Employed_full-time']
df = df.drop("Employment", axis=1)
df.info()

df.head(20)

df.shape

df.info()

df['Country'].value_counts()

def shorten_categories(categories,cutoff):
    categorical_map = {}
    for i in range (len(categories)):
        if categories.values[i] >= cutoff:
            categorical_map[categories.index[i]] = categories.index[i]
        else:
            categorical_map[categories.index[i]] = 'Other'
    return categorical_map

def shorten_categories(categories, cutoff):
    categorical_map = {}
    for i in range(len(categories)):
        if categories.values[i] >= cutoff:
            categorical_map[categories.index[i]] = categories.index[i]
        else:
            categorical_map[categories.index[i]] = 'Other'
    return categorical_map

country_map = shorten_categories(df.Country.value_counts(), 100)

df['Country'] = df['Country'].map(country_map)
df.Country.value_counts()

import matplotlib.pyplot as plt
fig, axe = plt.subplots(1,1, figsize=(12,7))
df.boxplot('Salary', 'Country', ax=axe)
plt.suptitle('Salary (US$) v Country')
plt.title('')
plt.ylabel('Salary')
plt.xticks(rotation=90)
plt.show()

df = df[df["Salary"] <= 250000]
df = df[df["Salary"] >= 10000]
df = df[df['Country'] != 'Other']

fig, ax = plt.subplots(1,1, figsize=(12, 7))
df.boxplot('Salary', 'Country', ax=ax)
plt.suptitle('Salary (US$) v Country')
plt.title('')
plt.ylabel('Salary')
plt.xticks(rotation=90)
plt.show()

df['YearsCodePro'].unique()

def clean_experience(x):
    if x ==  'More than 50 years':
        return 50
    if x == 'Less than 1 year':
        return 0.5
    return float(x)

df['YearsCodePro'] = df['YearsCodePro'].apply(clean_experience)

df['YearsCodePro'].unique()

df['EdLevel'].unique()

def Clean_education(x):
    if 'Bachelor’s degree' in x:
        return 'Bachelor’s degree'
    if 'Master’s degree' in x:
        return 'Master’s degree'
    if 'Professional degree' in x:
        return 'Post grad'
    return 'Less than a Bachelors'

df['EdLevel'] = df['EdLevel'].apply(Clean_education)
df['EdLevel'].unique()

df['EdLevel'].unique()

from sklearn.preprocessing import LabelEncoder

le_education = LabelEncoder()
df['EdLevel'] = le_education.fit_transform(df['EdLevel'])
df['EdLevel'].unique()

le_country = LabelEncoder()
df['Country'] = le_country.fit_transform(df['Country'])
df['Country'].unique()

x = df.drop('Salary',axis=1)
y = df['Salary']

from sklearn.linear_model import LinearRegression
linear_reg = LinearRegression()
linear_reg.fit(x, y.values)

y_pred = linear_reg.predict(x)

from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np
error = np.sqrt(mean_squared_error(y, y_pred))
error

from sklearn.tree import DecisionTreeRegressor
dec_tree_reg = DecisionTreeRegressor(random_state=0)
dec_tree_reg.fit(x, y.values)

y_pred = dec_tree_reg.predict(x)

error = np.sqrt(mean_squared_error(y, y_pred))
print("${:,.02f}".format(error))

"""# Random Forest Prediction"""

from sklearn.ensemble import RandomForestRegressor
random_forest_reg = RandomForestRegressor(random_state=0)
random_forest_reg.fit(x, y.values)

y_pred = random_forest_reg.predict(x)

error = np.sqrt(mean_squared_error(y, y_pred))
print("${:,.02f}".format(error))

from sklearn.model_selection import GridSearchCV

max_depth = [None, 2,4,6,8,10,12]
parameters = {"max_depth": max_depth}

regressor = DecisionTreeRegressor(random_state=0)
gs = GridSearchCV(regressor, parameters, scoring='neg_mean_squared_error')
gs.fit(x, y.values)

regressor = gs.best_estimator_

regressor.fit(x, y.values)
y_pred = regressor.predict(x)
error = np.sqrt(mean_squared_error(y, y_pred))
print("${:,.02f}".format(error))

regressor = gs.best_estimator_

regressor.fit(x, y.values)
y_pred = regressor.predict(x)
error = np.sqrt(mean_squared_error(y, y_pred))
print("${:,.02f}".format(error))

x

x = np.array([["United States of America", 'Master’s degree', 15 ]])
x

x[:, 0] = le_country.transform(x[:, 0])
x[:, 1] = le_education.transform(x[:, 1])
x = x.astype(float)

y_pred = regressor.predict(x)
y_pred

print(le_country.classes_)

import pickle

data = {"model": regressor, "le_country": le_country, "le_education": le_education}

with open('C:\\Users\\SUNNY\\Downloads\\Software Developer Salary prediction\\pre_saved_steps.pkl', 'wb') as file:
    pickle.dump(data, file)

with open('C:\\Users\\SUNNY\\Downloads\\Software Developer Salary prediction\\pre_saved_steps.pkl', 'rb') as file:
    data = pickle.load(file)

regressor_loaded = data["model"]
le_country = data["le_country"]
le_education = data["le_education"]
y_pred = regressor_loaded.predict(x)
y_pred
